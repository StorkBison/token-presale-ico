{
  "address": "0x6577e95551a288f634F96684cbf838EF102670A5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDCContract",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BuyTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "DisableWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "EnableWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TransferTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDCContract",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "reffers",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "codes",
          "type": "string[]"
        }
      ],
      "name": "addManyRefferalUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reffer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "code",
          "type": "string"
        }
      ],
      "name": "addRefferalUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToCode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfBuyer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "refferalCode",
          "type": "string"
        }
      ],
      "name": "buyTokensWithRefferal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokensWithUSDT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "refferalCode",
          "type": "string"
        }
      ],
      "name": "buyTokensWithUSDTWithRefferal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "refferalCode",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "refferalCode",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reffer",
          "type": "address"
        }
      ],
      "name": "getCodeFromAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleContractETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reStartPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "refferalUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "refferer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "code",
          "type": "string"
        }
      ],
      "name": "removeFromRefferalUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setTokenRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0aee434fca937a79430552fa2e94c202c6321deb2e1a6e26039afde074144a0",
  "receipt": {
    "to": null,
    "from": "0xbe9b00260f1d9cd47dAbd8a2Fcb40B67E3b99767",
    "contractAddress": "0x6577e95551a288f634F96684cbf838EF102670A5",
    "transactionIndex": 28,
    "gasUsed": "1822684",
    "logsBloom": "0x
    "blockHash": "0x3931e41b052ced3949fee8088a9a7c7864d7850eb0fc02257858ce02ec668531",
    "transactionHash": "0xb0aee434fca937a79430552fa2e94c202c6321deb2e1a6e26039afde074144a0",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 9244690,
        "transactionHash": "0xb0aee434fca937a79430552fa2e94c202c6321deb2e1a6e26039afde074144a0",
        "address": "0x6577e95551a288f634F96684cbf838EF102670A5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000be9b00260f1d9cd47dabd8a2fcb40b67e3b99767"
        ],
        "data": "0x",
        "logIndex": 110,
        "blockHash": "0x3931e41b052ced3949fee8088a9a7c7864d7850eb0fc02257858ce02ec668531"
      }
    ],
    "blockNumber": 9244690,
    "cumulativeGasUsed": "8844181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x27f7716f8ad3423Af195E67C715BAAc030e4A955",
    "0x3CE4c10D6CA1E46Fe66591AFc1968f995a9208EA"
  ],
  "numDeployments": 1,
  "solcInputHash": "4ac022c8bf915c8a3cf2b187598a2ce8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDCContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDCContract\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"reffers\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"codes\",\"type\":\"string[]\"}],\"name\":\"addManyRefferalUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reffer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"addRefferalUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"refferalCode\",\"type\":\"string\"}],\"name\":\"buyTokensWithRefferal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"refferalCode\",\"type\":\"string\"}],\"name\":\"buyTokensWithUSDTWithRefferal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"refferalCode\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"refferalCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reffer\",\"type\":\"address\"}],\"name\":\"getCodeFromAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleContractETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reStartPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refferalUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refferer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"removeFromRefferalUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DisableWhitelist(address)\":{\"details\":\"Emitted when the whitelist is lifted by `account`.\"},\"EnableWhitelist(address)\":{\"details\":\"Emitted when the whitelist is triggered by `account`.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"availableTokens()\":{\"details\":\"Returns the TKNs balance of presale contract.\"},\"buyTokens()\":{\"details\":\"Deposits ETH to get TKNs.\"},\"buyTokensWithRefferal(string)\":{\"details\":\"Deposits ETH to get TKNs.\"},\"buyTokensWithUSDT(uint256)\":{\"details\":\"Deposits USDT to get TKNs.\"},\"buyTokensWithUSDTWithRefferal(uint256,string)\":{\"details\":\"Deposits USDT to get TKNs.\"},\"claim(string)\":{\"details\":\"Claim TKNs.\"},\"claimable(string,address)\":{\"details\":\"calc Clamable Token Amount\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"presaleContractETHBalance()\":{\"details\":\"Returns the ETH balance of presale contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTokenRate(uint256)\":{\"details\":\"Deposits ETH to get TKNs.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTokens()\":{\"details\":\"Transfers ETH and remaining TKNs to Owner address.\"},\"whitelist()\":{\"details\":\"Returns true if whitelist is enabled, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the balance of an address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Presale.sol\":\"Presale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Presale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view virtual {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is IERC20, IERC20Metadata, Context {\\r\\n    mapping(address => uint) internal _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint)) private _allowances;\\r\\n\\r\\n    uint private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    //address public _presaleContractAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    /*function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }*/\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    /*function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }*/\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint currentAllowance = _allowances[owner][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint amount) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(address owner, address spender, uint amount) internal virtual {\\r\\n        uint currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint amount) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(address from, address to, uint amount) internal virtual {}\\r\\n\\r\\n    function setPresaleContractAddress() external virtual returns (address) {}\\r\\n\\r\\n    function approvePresaleContract(uint _amount) external virtual returns (bool) {}\\r\\n\\r\\n    function setLockedBalance(address _address, uint _lockedBalance) external virtual returns (bool) {}\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Whitelist is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the whitelist is triggered by `account`.\\r\\n     */\\r\\n    event EnableWhitelist(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the whitelist is lifted by `account`.\\r\\n     */\\r\\n    event DisableWhitelist(address account);\\r\\n\\r\\n    bool private _whitelist;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in a disabled whitelist state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _whitelist = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if whitelist is enabled, and false otherwise.\\r\\n     */\\r\\n    function whitelist() public view virtual returns (bool) {\\r\\n        return _whitelist;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when whitelist is disabled.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The whitelist must be disabled.\\r\\n     */\\r\\n\\r\\n    modifier whenDisabledWhitelist() {\\r\\n        require(!whitelist(), \\\"Whitelist is not disabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when whitelist is enabled.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The whitelist must be enabled.\\r\\n     */\\r\\n    modifier whenEnabledWhitelist() {\\r\\n        require(whitelist(), \\\"Whitelist is not enabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers enable state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The whitelist must be disabled.\\r\\n     */\\r\\n    function _enableWhitelist() internal virtual whenDisabledWhitelist {\\r\\n        _whitelist = true;\\r\\n        emit EnableWhitelist(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers disable state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The whitelist must be enabled.\\r\\n     */\\r\\n    function _disableWhitelist() internal virtual whenEnabledWhitelist {\\r\\n        _whitelist = false;\\r\\n        emit DisableWhitelist(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint);\\r\\n\\r\\n    function getRoundData(uint80 _roundId) external view returns (uint80 roundId, int answer, uint startedAt, uint updatedAt, uint80 answeredInRound);\\r\\n\\r\\n    function latestRoundData() external view returns (uint80 roundId, int answer, uint startedAt, uint updatedAt, uint80 answeredInRound);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract Presale is Ownable, Pausable, Whitelist {\\r\\n    // CONFIG START\\r\\n\\r\\n    ERC20 public immutable token; // Token contract instance.\\r\\n    ERC20 public immutable USDCContract;\\r\\n    AggregatorV3Interface internal dataFeed;\\r\\n\\r\\n    struct RefferalWhitelist {\\r\\n        address refferer;\\r\\n        uint amount;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint) public balanceOfBuyer;\\r\\n    mapping(string => RefferalWhitelist) public refferalUser;\\r\\n    mapping(address => string) public addressToCode;\\r\\n\\r\\n    address payable presaleOwner; // Presale owner wallet address, which must be the same than Token contract owner address.\\r\\n    address payable presaleContract;\\r\\n\\r\\n    uint private presaleRate; // How many TKNs can I buy with 1 USDT.\\r\\n\\r\\n    // CONFIG END\\r\\n\\r\\n    event BuyTokens(address, uint, address, uint);\\r\\n    event TransferTokens(address, uint);\\r\\n\\r\\n    constructor(address payable _tokenContract, address _USDCContract) payable {\\r\\n        token = ERC20(_tokenContract);\\r\\n        presaleOwner = payable(msg.sender);\\r\\n        presaleContract = payable(address(this));\\r\\n        USDCContract = ERC20(_USDCContract);\\r\\n        dataFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits ETH to get TKNs.\\r\\n     */\\r\\n    function setTokenRate(uint _rate) public onlyOwner {\\r\\n        presaleRate = _rate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits ETH to get TKNs.\\r\\n     */\\r\\n    function buyTokens() public payable whenNotPaused returns (bool) {\\r\\n        (\\r\\n            ,\\r\\n            /* uint80 roundID */\\r\\n            int answer, /*uint startedAt*/ /*uint timeStamp*/\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = /*uint80 answeredInRound*/\\r\\n            dataFeed.latestRoundData();\\r\\n        uint totalAmount = ((msg.value * uint(answer)) / (10**8)) * presaleRate;\\r\\n        balanceOfBuyer[msg.sender] += totalAmount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits USDT to get TKNs.\\r\\n     */\\r\\n    function buyTokensWithUSDT(uint _amount) public whenNotPaused returns (bool) {\\r\\n        USDCContract.transferFrom(msg.sender, address(this), _amount / presaleRate);\\r\\n        balanceOfBuyer[msg.sender] += _amount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits ETH to get TKNs.\\r\\n     */\\r\\n    function buyTokensWithRefferal(string memory refferalCode) public payable whenNotPaused returns (bool) {\\r\\n        require(refferalUser[refferalCode].refferer != address(0), \\\"Invalid Refferal Code.\\\");\\r\\n        (\\r\\n            ,\\r\\n            /* uint80 roundID */\\r\\n            int answer, /*uint startedAt*/ /*uint timeStamp*/\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = /*uint80 answeredInRound*/\\r\\n            dataFeed.latestRoundData();\\r\\n        uint totalAmount = ((msg.value * uint(answer) * 105) / 10**10) * presaleRate;\\r\\n        balanceOfBuyer[msg.sender] += totalAmount;\\r\\n        refferalUser[refferalCode].amount += (totalAmount * 5) / 100;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits USDT to get TKNs.\\r\\n     */\\r\\n    function buyTokensWithUSDTWithRefferal(uint _amount, string memory refferalCode) public whenNotPaused returns (bool) {\\r\\n        require(refferalUser[refferalCode].refferer != address(0), \\\"Invalid Refferal Code.\\\");\\r\\n        USDCContract.transferFrom(msg.sender, address(this), _amount / presaleRate);\\r\\n        balanceOfBuyer[msg.sender] += (_amount * 105) / 100;\\r\\n        refferalUser[refferalCode].amount += (_amount * 5) / 100;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim TKNs.\\r\\n     */\\r\\n    function claim(string memory refferalCode) public whenPaused returns (uint) {\\r\\n        uint amount = balanceOfBuyer[msg.sender];\\r\\n        if (refferalUser[refferalCode].refferer == msg.sender) {\\r\\n            amount += refferalUser[refferalCode].amount;\\r\\n        }\\r\\n        require(amount > 0, \\\"You didnt deposit anything.\\\");\\r\\n        require(amount <= availableTokens(), \\\"Insuficient liquidity. Buy less tokens\\\");\\r\\n        token.transfer(msg.sender, amount);\\r\\n        balanceOfBuyer[msg.sender] = 0;\\r\\n        refferalUser[refferalCode].amount = 0;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calc Clamable Token Amount\\r\\n     */\\r\\n    function claimable(string memory refferalCode, address claimer) public view returns (uint) {\\r\\n        uint amount = balanceOfBuyer[claimer];\\r\\n        if (refferalUser[refferalCode].refferer == claimer) {\\r\\n            amount += refferalUser[refferalCode].amount;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ETH and remaining TKNs to Owner address.\\r\\n     */\\r\\n    function transferTokens() public onlyOwner {\\r\\n        (bool sent, ) = msg.sender.call{value: presaleContractETHBalance(), gas: 1000000}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send ETH\\\");\\r\\n\\r\\n        if (availableTokens() > 0) {\\r\\n            token.transfer(msg.sender, availableTokens());\\r\\n        }\\r\\n        USDCContract.transfer(msg.sender, USDCContract.balanceOf(presaleContract));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ETH balance of presale contract.\\r\\n     */\\r\\n    function presaleContractETHBalance() public view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TKNs balance of presale contract.\\r\\n     */\\r\\n    function availableTokens() public view returns (uint) {\\r\\n        return token.balanceOf(presaleContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the balance of an address.\\r\\n     */\\r\\n    function balanceOf(address _address) public view returns (uint) {\\r\\n        return token.balanceOf(_address);\\r\\n    }\\r\\n\\r\\n    function pausePresale() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function reStartPresale() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function addRefferalUser(address reffer, string memory code) public onlyOwner {\\r\\n        refferalUser[code] = RefferalWhitelist(reffer, 0);\\r\\n        addressToCode[reffer] = code;\\r\\n    }\\r\\n\\r\\n    function addManyRefferalUsers(address[] memory reffers, string[] memory codes) public onlyOwner {\\r\\n        for (uint i = 0; i < reffers.length; i++) {\\r\\n            refferalUser[codes[i]] = RefferalWhitelist(reffers[i], 0);\\r\\n            addressToCode[reffers[i]] = codes[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFromRefferalUsers(string memory code) public onlyOwner {\\r\\n        refferalUser[code] = RefferalWhitelist(address(0), 0);\\r\\n    }\\r\\n\\r\\n    function getCodeFromAddress(address reffer) public view returns (string memory) {\\r\\n        return addressToCode[reffer];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x19ce1672db7bf08c48db6c31be9c370e8f20c2ded17bf06115593a70284d79fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260405162001fe338038062001fe38339810160408190526200002691620000ff565b620000313362000096565b6000805461ffff60a01b191690556001600160a01b03918216608052600580546001600160a01b0319908116331790915560068054821630179055911660a0526001805490911673d4a33860578de61dbabdc8bfdb98fd742fa7028e1790556200013e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000fc57600080fd5b50565b600080604083850312156200011357600080fd5b82516200012081620000e6565b60208401519092506200013381620000e6565b809150509250929050565b60805160a051611e4e620001956000396000818161042c01528181610729015281816108cc0152610dbf0152600081816105330152818161066001528181610a8901528181610b1b01526115410152611e4e6000f3fe60806040526004361061019c5760003560e01c806393e59dc1116100ec578063d8130ec91161008a578063f2fde38b11610064578063f2fde38b146104ce578063f3fe12c9146104ee578063f61788631461050e578063fc0c546a1461052157600080fd5b8063d8130ec914610461578063d87c5fb914610481578063e6f10734146104ae57600080fd5b8063c4f74631116100c6578063c4f74631146103e5578063d0febe4c14610412578063d28735101461041a578063d3cfcedd1461044e57600080fd5b806393e59dc11461038657806396750ba0146103a5578063ab8fcec2146103c557600080fd5b806362fdc4971161015957806370a082311161013357806370a082311461030a578063715018a61461032a5780637889237f1461033f5780638da5cb5b1461035457600080fd5b806362fdc4971461025d57806367427a3a146102c757806369bb4dc2146102e757600080fd5b8063070f5c09146101a15780631792b0bc146101b85780635a37578e146101cd5780635c975abb146101ed5780635ef8086f1461021d57806361241c281461023d575b600080fd5b3480156101ad57600080fd5b506101b6610555565b005b3480156101c457600080fd5b506101b6610592565b3480156101d957600080fd5b506101b66101e836600461184a565b610813565b3480156101f957600080fd5b50600054600160a01b900460ff165b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610208610238366004611898565b6108c0565b34801561024957600080fd5b506101b6610258366004611898565b6109b0565b34801561026957600080fd5b506102a86102783660046118b1565b8051602081830181018051600382529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610214565b3480156102d357600080fd5b506101b66102e23660046118b1565b6109df565b3480156102f357600080fd5b506102fc610a64565b604051908152602001610214565b34801561031657600080fd5b506102fc6103253660046118ee565b610af9565b34801561033657600080fd5b506101b6610b8e565b34801561034b57600080fd5b506101b6610bc2565b34801561036057600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610214565b34801561039257600080fd5b50600054600160a81b900460ff16610208565b3480156103b157600080fd5b506101b66103c03660046119bd565b610bf4565b3480156103d157600080fd5b506102086103e0366004611a73565b610d39565b3480156103f157600080fd5b506104056104003660046118ee565b610f06565b6040516102149190611ac8565b610208610fa0565b34801561042657600080fd5b5061036e7f000000000000000000000000000000000000000000000000000000000000000081565b61020861045c3660046118b1565b61107a565b34801561046d57600080fd5b506102fc61047c366004611afb565b611228565b34801561048d57600080fd5b506102fc61049c3660046118ee565b60026020526000908152604090205481565b3480156104ba57600080fd5b506104056104c93660046118ee565b6112ab565b3480156104da57600080fd5b506101b66104e93660046118ee565b611357565b3480156104fa57600080fd5b506102fc6105093660046118b1565b6113f2565b34801561051a57600080fd5b50476102fc565b34801561052d57600080fd5b5061036e7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146105885760405162461bcd60e51b815260040161057f90611b49565b60405180910390fd5b6105906115f3565b565b6000546001600160a01b031633146105bc5760405162461bcd60e51b815260040161057f90611b49565b60003347604051620f424091906000818181858888f193505050503d8060008114610603576040519150601f19603f3d011682016040523d82523d6000602084013e610608565b606091505b505090508061064e5760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b604482015260640161057f565b6000610658610a64565b1115610707577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb33610696610a64565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611b7e565b505b6006546040516370a0823160e01b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb90339083906370a0823190602401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611ba0565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190611b7e565b5050565b6000546001600160a01b0316331461083d5760405162461bcd60e51b815260040161057f90611b49565b6040518060400160405280836001600160a01b03168152602001600081525060038260405161086c9190611bb9565b9081526040805160209281900383019020835181546001600160a01b0319166001600160a01b039182161782559383015160019091015591841660009081526004909152206108bb8282611c5d565b505050565b60006108ca611653565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd3330600754866109099190611d33565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190611b7e565b5033600090815260026020526040812080548492906109a1908490611d55565b9091555060019150505b919050565b6000546001600160a01b031633146109da5760405162461bcd60e51b815260040161057f90611b49565b600755565b6000546001600160a01b03163314610a095760405162461bcd60e51b815260040161057f90611b49565b604080518082018252600080825260208201529051600390610a2c908490611bb9565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b0390911617815591015160019091015550565b6006546040516370a0823160e01b81526001600160a01b0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190611ba0565b905090565b6040516370a0823160e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190611ba0565b92915050565b6000546001600160a01b03163314610bb85760405162461bcd60e51b815260040161057f90611b49565b61059060006116a0565b6000546001600160a01b03163314610bec5760405162461bcd60e51b815260040161057f90611b49565b6105906116f0565b6000546001600160a01b03163314610c1e5760405162461bcd60e51b815260040161057f90611b49565b60005b82518110156108bb576040518060400160405280848381518110610c4757610c47611d68565b60200260200101516001600160a01b0316815260200160008152506003838381518110610c7657610c76611d68565b6020026020010151604051610c8b9190611bb9565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781559101516001909101558151829082908110610cd457610cd4611d68565b602002602001015160046000858481518110610cf257610cf2611d68565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209081610d269190611c5d565b5080610d3181611d7e565b915050610c21565b6000610d43611653565b60006001600160a01b0316600383604051610d5e9190611bb9565b908152604051908190036020019020546001600160a01b031603610dbd5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102932b33332b930b61021b7b2329760511b604482015260640161057f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd333060075487610dfc9190611d33565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611b7e565b506064610e82846069611d97565b610e8c9190611d33565b3360009081526002602052604081208054909190610eab908490611d55565b9091555060649050610ebe846005611d97565b610ec89190611d33565b600383604051610ed89190611bb9565b90815260200160405180910390206001016000828254610ef89190611d55565b909155506001949350505050565b60046020526000908152604090208054610f1f90611bd5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90611bd5565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505081565b6000610faa611653565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa158015610ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110189190611dc8565b50505091505060006007546305f5e10083346110349190611d97565b61103e9190611d33565b6110489190611d97565b3360009081526002602052604081208054929350839290919061106c908490611d55565b909155506001935050505090565b6000611084611653565b60006001600160a01b031660038360405161109f9190611bb9565b908152604051908190036020019020546001600160a01b0316036110fe5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102932b33332b930b61021b7b2329760511b604482015260640161057f565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190611dc8565b50505091505060006007546402540be40083346111899190611d97565b611194906069611d97565b61119e9190611d33565b6111a89190611d97565b336000908152600260205260408120805492935083929091906111cc908490611d55565b90915550606490506111df826005611d97565b6111e99190611d33565b6003856040516111f99190611bb9565b908152602001604051809103902060010160008282546112199190611d55565b90915550600195945050505050565b6001600160a01b03811660008181526002602052604080822054905191929091600390611256908790611bb9565b908152604051908190036020019020546001600160a01b0316036112a4576003846040516112849190611bb9565b908152602001604051809103902060010154816112a19190611d55565b90505b9392505050565b6001600160a01b03811660009081526004602052604090208054606091906112d290611bd5565b80601f01602080910402602001604051908101604052809291908181526020018280546112fe90611bd5565b801561134b5780601f106113205761010080835404028352916020019161134b565b820191906000526020600020905b81548152906001019060200180831161132e57829003601f168201915b50505050509050919050565b6000546001600160a01b031633146113815760405162461bcd60e51b815260040161057f90611b49565b6001600160a01b0381166113e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057f565b6113ef816116a0565b50565b60006113fc61172c565b3360008181526002602052604090819020549051909190600390611421908690611bb9565b908152604051908190036020019020546001600160a01b03160361146f5760038360405161144f9190611bb9565b9081526020016040518091039020600101548161146c9190611d55565b90505b600081116114bf5760405162461bcd60e51b815260206004820152601b60248201527f596f75206469646e74206465706f73697420616e797468696e672e0000000000604482015260640161057f565b6114c7610a64565b8111156115255760405162461bcd60e51b815260206004820152602660248201527f496e737566696369656e74206c69717569646974792e20427579206c65737320604482015265746f6b656e7360d01b606482015260840161057f565b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190611b7e565b5033600090815260026020526040808220829055516003906115d9908690611bb9565b908152604051908190036020019020600101559050919050565b6115fb611653565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116363390565b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156105905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161057f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6116f861172c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611636565b600054600160a01b900460ff166105905760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161057f565b80356001600160a01b03811681146109ab57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156117d2576117d2611793565b604052919050565b600082601f8301126117eb57600080fd5b813567ffffffffffffffff81111561180557611805611793565b611818601f8201601f19166020016117a9565b81815284602083860101111561182d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561185d57600080fd5b6118668361177c565b9150602083013567ffffffffffffffff81111561188257600080fd5b61188e858286016117da565b9150509250929050565b6000602082840312156118aa57600080fd5b5035919050565b6000602082840312156118c357600080fd5b813567ffffffffffffffff8111156118da57600080fd5b6118e6848285016117da565b949350505050565b60006020828403121561190057600080fd5b6112a48261177c565b600067ffffffffffffffff82111561192357611923611793565b5060051b60200190565b600082601f83011261193e57600080fd5b8135602061195361194e83611909565b6117a9565b82815260059290921b8401810191818101908684111561197257600080fd5b8286015b848110156119b257803567ffffffffffffffff8111156119965760008081fd5b6119a48986838b01016117da565b845250918301918301611976565b509695505050505050565b600080604083850312156119d057600080fd5b823567ffffffffffffffff808211156119e857600080fd5b818501915085601f8301126119fc57600080fd5b81356020611a0c61194e83611909565b82815260059290921b84018101918181019089841115611a2b57600080fd5b948201945b83861015611a5057611a418661177c565b82529482019490820190611a30565b96505086013592505080821115611a6657600080fd5b5061188e8582860161192d565b60008060408385031215611a8657600080fd5b82359150602083013567ffffffffffffffff81111561188257600080fd5b60005b83811015611abf578181015183820152602001611aa7565b50506000910152565b6020815260008251806020840152611ae7816040850160208701611aa4565b601f01601f19169190910160400192915050565b60008060408385031215611b0e57600080fd5b823567ffffffffffffffff811115611b2557600080fd5b611b31858286016117da565b925050611b406020840161177c565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611b9057600080fd5b815180151581146112a457600080fd5b600060208284031215611bb257600080fd5b5051919050565b60008251611bcb818460208701611aa4565b9190910192915050565b600181811c90821680611be957607f821691505b602082108103611c0957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108bb57600081815260208120601f850160051c81016020861015611c365750805b601f850160051c820191505b81811015611c5557828155600101611c42565b505050505050565b815167ffffffffffffffff811115611c7757611c77611793565b611c8b81611c858454611bd5565b84611c0f565b602080601f831160018114611cc05760008415611ca85750858301515b600019600386901b1c1916600185901b178555611c55565b600085815260208120601f198616915b82811015611cef57888601518255948401946001909101908401611cd0565b5085821015611d0d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600082611d5057634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610b8857610b88611d1d565b634e487b7160e01b600052603260045260246000fd5b600060018201611d9057611d90611d1d565b5060010190565b8082028115828204841417610b8857610b88611d1d565b805169ffffffffffffffffffff811681146109ab57600080fd5b600080600080600060a08688031215611de057600080fd5b611de986611dae565b9450602086015193506040860151925060608601519150611e0c60808701611dae565b9050929550929590935056fea26469706673582212203b3ea8d27be07a1de2598e71eeb4421f98435e978427b2474158b86c7ac15b6864736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806393e59dc1116100ec578063d8130ec91161008a578063f2fde38b11610064578063f2fde38b146104ce578063f3fe12c9146104ee578063f61788631461050e578063fc0c546a1461052157600080fd5b8063d8130ec914610461578063d87c5fb914610481578063e6f10734146104ae57600080fd5b8063c4f74631116100c6578063c4f74631146103e5578063d0febe4c14610412578063d28735101461041a578063d3cfcedd1461044e57600080fd5b806393e59dc11461038657806396750ba0146103a5578063ab8fcec2146103c557600080fd5b806362fdc4971161015957806370a082311161013357806370a082311461030a578063715018a61461032a5780637889237f1461033f5780638da5cb5b1461035457600080fd5b806362fdc4971461025d57806367427a3a146102c757806369bb4dc2146102e757600080fd5b8063070f5c09146101a15780631792b0bc146101b85780635a37578e146101cd5780635c975abb146101ed5780635ef8086f1461021d57806361241c281461023d575b600080fd5b3480156101ad57600080fd5b506101b6610555565b005b3480156101c457600080fd5b506101b6610592565b3480156101d957600080fd5b506101b66101e836600461184a565b610813565b3480156101f957600080fd5b50600054600160a01b900460ff165b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610208610238366004611898565b6108c0565b34801561024957600080fd5b506101b6610258366004611898565b6109b0565b34801561026957600080fd5b506102a86102783660046118b1565b8051602081830181018051600382529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610214565b3480156102d357600080fd5b506101b66102e23660046118b1565b6109df565b3480156102f357600080fd5b506102fc610a64565b604051908152602001610214565b34801561031657600080fd5b506102fc6103253660046118ee565b610af9565b34801561033657600080fd5b506101b6610b8e565b34801561034b57600080fd5b506101b6610bc2565b34801561036057600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610214565b34801561039257600080fd5b50600054600160a81b900460ff16610208565b3480156103b157600080fd5b506101b66103c03660046119bd565b610bf4565b3480156103d157600080fd5b506102086103e0366004611a73565b610d39565b3480156103f157600080fd5b506104056104003660046118ee565b610f06565b6040516102149190611ac8565b610208610fa0565b34801561042657600080fd5b5061036e7f000000000000000000000000000000000000000000000000000000000000000081565b61020861045c3660046118b1565b61107a565b34801561046d57600080fd5b506102fc61047c366004611afb565b611228565b34801561048d57600080fd5b506102fc61049c3660046118ee565b60026020526000908152604090205481565b3480156104ba57600080fd5b506104056104c93660046118ee565b6112ab565b3480156104da57600080fd5b506101b66104e93660046118ee565b611357565b3480156104fa57600080fd5b506102fc6105093660046118b1565b6113f2565b34801561051a57600080fd5b50476102fc565b34801561052d57600080fd5b5061036e7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146105885760405162461bcd60e51b815260040161057f90611b49565b60405180910390fd5b6105906115f3565b565b6000546001600160a01b031633146105bc5760405162461bcd60e51b815260040161057f90611b49565b60003347604051620f424091906000818181858888f193505050503d8060008114610603576040519150601f19603f3d011682016040523d82523d6000602084013e610608565b606091505b505090508061064e5760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b604482015260640161057f565b6000610658610a64565b1115610707577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb33610696610a64565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611b7e565b505b6006546040516370a0823160e01b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb90339083906370a0823190602401602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611ba0565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190611b7e565b5050565b6000546001600160a01b0316331461083d5760405162461bcd60e51b815260040161057f90611b49565b6040518060400160405280836001600160a01b03168152602001600081525060038260405161086c9190611bb9565b9081526040805160209281900383019020835181546001600160a01b0319166001600160a01b039182161782559383015160019091015591841660009081526004909152206108bb8282611c5d565b505050565b60006108ca611653565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd3330600754866109099190611d33565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561095d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109819190611b7e565b5033600090815260026020526040812080548492906109a1908490611d55565b9091555060019150505b919050565b6000546001600160a01b031633146109da5760405162461bcd60e51b815260040161057f90611b49565b600755565b6000546001600160a01b03163314610a095760405162461bcd60e51b815260040161057f90611b49565b604080518082018252600080825260208201529051600390610a2c908490611bb9565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b0390911617815591015160019091015550565b6006546040516370a0823160e01b81526001600160a01b0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190611ba0565b905090565b6040516370a0823160e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190611ba0565b92915050565b6000546001600160a01b03163314610bb85760405162461bcd60e51b815260040161057f90611b49565b61059060006116a0565b6000546001600160a01b03163314610bec5760405162461bcd60e51b815260040161057f90611b49565b6105906116f0565b6000546001600160a01b03163314610c1e5760405162461bcd60e51b815260040161057f90611b49565b60005b82518110156108bb576040518060400160405280848381518110610c4757610c47611d68565b60200260200101516001600160a01b0316815260200160008152506003838381518110610c7657610c76611d68565b6020026020010151604051610c8b9190611bb9565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781559101516001909101558151829082908110610cd457610cd4611d68565b602002602001015160046000858481518110610cf257610cf2611d68565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209081610d269190611c5d565b5080610d3181611d7e565b915050610c21565b6000610d43611653565b60006001600160a01b0316600383604051610d5e9190611bb9565b908152604051908190036020019020546001600160a01b031603610dbd5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102932b33332b930b61021b7b2329760511b604482015260640161057f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd333060075487610dfc9190611d33565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611b7e565b506064610e82846069611d97565b610e8c9190611d33565b3360009081526002602052604081208054909190610eab908490611d55565b9091555060649050610ebe846005611d97565b610ec89190611d33565b600383604051610ed89190611bb9565b90815260200160405180910390206001016000828254610ef89190611d55565b909155506001949350505050565b60046020526000908152604090208054610f1f90611bd5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90611bd5565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505081565b6000610faa611653565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa158015610ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110189190611dc8565b50505091505060006007546305f5e10083346110349190611d97565b61103e9190611d33565b6110489190611d97565b3360009081526002602052604081208054929350839290919061106c908490611d55565b909155506001935050505090565b6000611084611653565b60006001600160a01b031660038360405161109f9190611bb9565b908152604051908190036020019020546001600160a01b0316036110fe5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102932b33332b930b61021b7b2329760511b604482015260640161057f565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190611dc8565b50505091505060006007546402540be40083346111899190611d97565b611194906069611d97565b61119e9190611d33565b6111a89190611d97565b336000908152600260205260408120805492935083929091906111cc908490611d55565b90915550606490506111df826005611d97565b6111e99190611d33565b6003856040516111f99190611bb9565b908152602001604051809103902060010160008282546112199190611d55565b90915550600195945050505050565b6001600160a01b03811660008181526002602052604080822054905191929091600390611256908790611bb9565b908152604051908190036020019020546001600160a01b0316036112a4576003846040516112849190611bb9565b908152602001604051809103902060010154816112a19190611d55565b90505b9392505050565b6001600160a01b03811660009081526004602052604090208054606091906112d290611bd5565b80601f01602080910402602001604051908101604052809291908181526020018280546112fe90611bd5565b801561134b5780601f106113205761010080835404028352916020019161134b565b820191906000526020600020905b81548152906001019060200180831161132e57829003601f168201915b50505050509050919050565b6000546001600160a01b031633146113815760405162461bcd60e51b815260040161057f90611b49565b6001600160a01b0381166113e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057f565b6113ef816116a0565b50565b60006113fc61172c565b3360008181526002602052604090819020549051909190600390611421908690611bb9565b908152604051908190036020019020546001600160a01b03160361146f5760038360405161144f9190611bb9565b9081526020016040518091039020600101548161146c9190611d55565b90505b600081116114bf5760405162461bcd60e51b815260206004820152601b60248201527f596f75206469646e74206465706f73697420616e797468696e672e0000000000604482015260640161057f565b6114c7610a64565b8111156115255760405162461bcd60e51b815260206004820152602660248201527f496e737566696369656e74206c69717569646974792e20427579206c65737320604482015265746f6b656e7360d01b606482015260840161057f565b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190611b7e565b5033600090815260026020526040808220829055516003906115d9908690611bb9565b908152604051908190036020019020600101559050919050565b6115fb611653565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116363390565b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156105905760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161057f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6116f861172c565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611636565b600054600160a01b900460ff166105905760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161057f565b80356001600160a01b03811681146109ab57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156117d2576117d2611793565b604052919050565b600082601f8301126117eb57600080fd5b813567ffffffffffffffff81111561180557611805611793565b611818601f8201601f19166020016117a9565b81815284602083860101111561182d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561185d57600080fd5b6118668361177c565b9150602083013567ffffffffffffffff81111561188257600080fd5b61188e858286016117da565b9150509250929050565b6000602082840312156118aa57600080fd5b5035919050565b6000602082840312156118c357600080fd5b813567ffffffffffffffff8111156118da57600080fd5b6118e6848285016117da565b949350505050565b60006020828403121561190057600080fd5b6112a48261177c565b600067ffffffffffffffff82111561192357611923611793565b5060051b60200190565b600082601f83011261193e57600080fd5b8135602061195361194e83611909565b6117a9565b82815260059290921b8401810191818101908684111561197257600080fd5b8286015b848110156119b257803567ffffffffffffffff8111156119965760008081fd5b6119a48986838b01016117da565b845250918301918301611976565b509695505050505050565b600080604083850312156119d057600080fd5b823567ffffffffffffffff808211156119e857600080fd5b818501915085601f8301126119fc57600080fd5b81356020611a0c61194e83611909565b82815260059290921b84018101918181019089841115611a2b57600080fd5b948201945b83861015611a5057611a418661177c565b82529482019490820190611a30565b96505086013592505080821115611a6657600080fd5b5061188e8582860161192d565b60008060408385031215611a8657600080fd5b82359150602083013567ffffffffffffffff81111561188257600080fd5b60005b83811015611abf578181015183820152602001611aa7565b50506000910152565b6020815260008251806020840152611ae7816040850160208701611aa4565b601f01601f19169190910160400192915050565b60008060408385031215611b0e57600080fd5b823567ffffffffffffffff811115611b2557600080fd5b611b31858286016117da565b925050611b406020840161177c565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611b9057600080fd5b815180151581146112a457600080fd5b600060208284031215611bb257600080fd5b5051919050565b60008251611bcb818460208701611aa4565b9190910192915050565b600181811c90821680611be957607f821691505b602082108103611c0957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108bb57600081815260208120601f850160051c81016020861015611c365750805b601f850160051c820191505b81811015611c5557828155600101611c42565b505050505050565b815167ffffffffffffffff811115611c7757611c77611793565b611c8b81611c858454611bd5565b84611c0f565b602080601f831160018114611cc05760008415611ca85750858301515b600019600386901b1c1916600185901b178555611c55565b600085815260208120601f198616915b82811015611cef57888601518255948401946001909101908401611cd0565b5085821015611d0d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600082611d5057634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610b8857610b88611d1d565b634e487b7160e01b600052603260045260246000fd5b600060018201611d9057611d90611d1d565b5060010190565b8082028115828204841417610b8857610b88611d1d565b805169ffffffffffffffffffff811681146109ab57600080fd5b600080600080600060a08688031215611de057600080fd5b611de986611dae565b9450602086015193506040860151925060608601519150611e0c60808701611dae565b9050929550929590935056fea26469706673582212203b3ea8d27be07a1de2598e71eeb4421f98435e978427b2474158b86c7ac15b6864736f6c63430008120033",
  "devdoc": {
    "events": {
      "DisableWhitelist(address)": {
        "details": "Emitted when the whitelist is lifted by `account`."
      },
      "EnableWhitelist(address)": {
        "details": "Emitted when the whitelist is triggered by `account`."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "availableTokens()": {
        "details": "Returns the TKNs balance of presale contract."
      },
      "buyTokens()": {
        "details": "Deposits ETH to get TKNs."
      },
      "buyTokensWithRefferal(string)": {
        "details": "Deposits ETH to get TKNs."
      },
      "buyTokensWithUSDT(uint256)": {
        "details": "Deposits USDT to get TKNs."
      },
      "buyTokensWithUSDTWithRefferal(uint256,string)": {
        "details": "Deposits USDT to get TKNs."
      },
      "claim(string)": {
        "details": "Claim TKNs."
      },
      "claimable(string,address)": {
        "details": "calc Clamable Token Amount"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "presaleContractETHBalance()": {
        "details": "Returns the ETH balance of presale contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTokenRate(uint256)": {
        "details": "Deposits ETH to get TKNs."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTokens()": {
        "details": "Transfers ETH and remaining TKNs to Owner address."
      },
      "whitelist()": {
        "details": "Returns true if whitelist is enabled, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the balance of an address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/Presale.sol:Presale",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 37,
        "contract": "contracts/Presale.sol:Presale",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 889,
        "contract": "contracts/Presale.sol:Presale",
        "label": "_whitelist",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1024,
        "contract": "contracts/Presale.sol:Presale",
        "label": "dataFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)1008"
      },
      {
        "astId": 1033,
        "contract": "contracts/Presale.sol:Presale",
        "label": "balanceOfBuyer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1038,
        "contract": "contracts/Presale.sol:Presale",
        "label": "refferalUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(RefferalWhitelist)1029_storage)"
      },
      {
        "astId": 1042,
        "contract": "contracts/Presale.sol:Presale",
        "label": "addressToCode",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1044,
        "contract": "contracts/Presale.sol:Presale",
        "label": "presaleOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 1046,
        "contract": "contracts/Presale.sol:Presale",
        "label": "presaleContract",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 1048,
        "contract": "contracts/Presale.sol:Presale",
        "label": "presaleRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)1008": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(RefferalWhitelist)1029_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Presale.RefferalWhitelist)",
        "numberOfBytes": "32",
        "value": "t_struct(RefferalWhitelist)1029_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RefferalWhitelist)1029_storage": {
        "encoding": "inplace",
        "label": "struct Presale.RefferalWhitelist",
        "members": [
          {
            "astId": 1026,
            "contract": "contracts/Presale.sol:Presale",
            "label": "refferer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1028,
            "contract": "contracts/Presale.sol:Presale",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}